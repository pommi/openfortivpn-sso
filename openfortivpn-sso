#!/usr/bin/env python3
import argparse
import logging
import signal
import sqlite3
import subprocess
import sys
import time
from Cryptodome.Cipher import AES
from Cryptodome.Protocol.KDF import PBKDF2
from pathlib import Path

logger = logging.getLogger("stdout")
logger.setLevel(logging.INFO)
stdout_log_handler = logging.StreamHandler(sys.stdout)
stdout_log_handler.setFormatter(
    logging.Formatter(
        "[%(asctime)s] %(levelname)s [%(funcName)s:%(lineno)d] %(message)s"
    )
)
logger.addHandler(stdout_log_handler)


def parse_args():
    parser = argparse.ArgumentParser(
        description="Obtains SVPNCOOKIE from browser cookie database and uses that with OpenFortiVPN"
    )
    parser.add_argument("--server", "-S", required=True, help="Server Hostname")
    parser.add_argument("--debug", "-d", action="store_true", help="Enable debugging")
    args = parser.parse_args()
    return args


def chrome_decrypt(encrypted, key=None):
    # Encrypted cookies should be prefixed with 'v10' according to the
    # Chromium code. Strip it off.
    encrypted = encrypted[3:]

    # Strip padding by taking off number indicated by padding
    # eg if last is '\x0e' then ord('\x0e') == 14, so take off 14.
    def clean(x):
        return x[: -x[-1]]

    cipher = AES.new(key, AES.MODE_CBC, IV=b" " * 16)
    decrypted = cipher.decrypt(encrypted)

    return clean(decrypted)


def retrieve_cookie_from_browser_cookie_database(browser="microsoft-edge"):
    conn = sqlite3.connect(Path.home() / ".config" / browser / "Default/Cookies")
    cur = conn.cursor()
    cur.execute("SELECT encrypted_value FROM cookies WHERE name='SVPNCOOKIE'")
    encrypted_value = cur.fetchone()
    conn.close()

    if encrypted_value is None:
        return None

    svpncookie_encrypted = encrypted_value[0]

    key = PBKDF2("peanuts", b"saltysalt", 16, 1)
    return chrome_decrypt(svpncookie_encrypted, key=key).decode()


def retrieve_cookie(timeout=30, browser="microsoft-edge"):
    cookie = None
    while cookie is None and timeout > 0:
        cookie = retrieve_cookie_from_browser_cookie_database(browser)
        if cookie is None:
            logger.info(f"SVPNCOOKIE is not available yet, retrying.. {timeout}")
            timeout = timeout - 1
            time.sleep(1)
        else:
            logger.info("SVPNCOOKIE obtained from browser cookie database")
            logger.debug("SVPNCOOKIE=" + cookie)

    return cookie


def spawn_browser(server, url, browser="microsoft-edge"):
    cmds = ["/usr/bin/nohup", browser, f"https://{server}{url}"]
    subprocess.Popen(cmds, start_new_session=True)
    return


def store_cookie(cookie, path):
    with open(path, "w") as cookiefile:
        cookiefile.write(f"SVPNCOOKIE={cookie}")


def spawn_openfortivpn(server, cookie_file):
    cmds = [
        "sudo",
        "/usr/bin/openfortivpn",
        f"{server}:443",
        "--cookie-on-stdin",
    ]
    with open(cookie_file, "r") as cookie:
        try:
            proc = subprocess.Popen(cmds, stdin=cookie)
            (_, stderr) = proc.communicate()
            if stderr is not None:
                logger.error(stderr)
        except KeyboardInterrupt:
            logger.info("Ctrl-C")
            proc.send_signal(signal.SIGINT)
    return


def main():
    args = parse_args()
    if args.debug:
        logger.setLevel(logging.DEBUG)

    url = "/remote/saml/start?realm="
    spawn_browser(args.server, url)
    cookie = retrieve_cookie()
    if cookie is None:
        logger.error("SVPNCOOKIE not available in browser cookie database")
        sys.exit(1)
    cookie_path = Path.home() / ".svpncookie"
    store_cookie(cookie, cookie_path)
    spawn_openfortivpn(args.server, cookie_path)


if __name__ == "__main__":
    main()
